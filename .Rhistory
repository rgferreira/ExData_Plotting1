plot(means)
hist(means)
plot(means)
means <- cumsum(rexp(0:1000, 0.2))/(1:1000)
for (i in 1:1000) mns = c(mns, rexp(40, 0.2)/(1:1000)))
for (i in 1:1000) mns = c(mns, rexp(40, 0.2)/(1:i)))
for (i in 1:1000) mns = c(mns, rexp(40, 0.2)/(i)))
for (i in 1:1000) mns = c(mns, rexp(40, 0.2)/(1:1000)))
means <- cumsum(rexp(40, 0.2))/(1:1000)
plot(means)
means <- cumsum(rexp(40, 0.2))/(1:10000)
plot(means)
means <- cumsum(rexp(40, 0.2))/(1:100)
means <- cumsum(rexp(40, 0.2))/(1:1000)
means <- cumsum(rexp(40, 0.2))/(1:500)
means <- cumsum(rexp(40, 0.2))/(1:600)
plot(means)
means <- cumsum(rexp(40, 0.2)/(1:500))
means <- cumsum(rexp(40, 0.2)/(1:100))
means <- cumsum(rexp(40, 0.2)/(1:1000))
plot(means)
means <- cumsum(rexp(40, 0.2)/(1:5000))
plot(means)
for (i in 1:1000) mns = c(msn, cumsum(rexp(40, 02)/(1:1000)))
for (i in 1:1000) mns = c(mns, cumsum(rexp(40, 02)/(1:1000)))
plot(mns)
hist(mns)
for (i in 1:1000) mns = c(mns, cumsum(rexp(40, 02)/(1:100)))
plot(means)
hist(mns)
plot(mns)
plot(mns)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
library(ggplot)
library(ggplot)
library(ggplot2)
library("ggplot2")
library("ggplot2")
library(ggplot2)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 1000)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 1000)
),
size = factor(rep(c(10, 20, 1000), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 1000, replace = TRUE),
nosim), 1, cfunc, 1000)
),
size = factor(rep(c(10, 20, 1000), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 1000, replace = TRUE),
nosim), 1, cfunc, 1000)
),
size = factor(rep(c(10, 20, 1000), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
install.packages("UsingR")
library(UsingR)
data(galton)
par(mfrow=c(1,2))
mfrow
hist(galton$child, col="blue", breaks=100)
hist(galton$child, col="blue", breaks=3)
hist(galton$child, col="blue", breaks=30)
hist(galton$child, col="blue", breaks=25)
hist(galton$child, col="blue", breaks=15)
hist(galton$parent, col="blue", breaks=15)
library(manipulate)myHist <- function(mu){    hist(galton$child,col="blue",breaks=100)    lines(c(mu, mu), c(0, 150),col="red",lwd=5)    mse <- mean((galton$child - mu)^2)    text(63, 150, paste("mu = ", mu))    text(63, 140, paste("MSE = ", round(mse, 2)))}manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){    hist(galton$child,col="blue",breaks=100)    lines(c(mu, mu), c(0, 150),col="red",lwd=5)    mse <- mean((galton$child - mu)^2)    text(63, 150, paste("mu = ", mu))    text(63, 140, paste("MSE = ", round(mse, 2)))}manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){    hist(galton$child,col="blue",breaks=100)    lines(c(mu, mu), c(0, 150),col="red",lwd=5)    mse <- mean((galton$child - mu)^2)    text(63, 150, paste("mu = ", mu))    text(63, 140, paste("MSE = ", round(mse, 2)))}manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){    hist(galton$child,col="blue",breaks=100)    lines(c(mu, mu), c(0, 150),col="red",lwd=5)    mse <- mean((galton$child - mu)^2)    text(63, 150, paste("mu = ", mu))    text(63, 140, paste("MSE = ", round(mse, 2)))}manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){    hist(galton$child,col="blue",breaks=100)    lines(c(mu, mu), c(0, 150),col="red",lwd=5)    mse <- mean((galton$child - mu)^2)    text(63, 150, paste("mu = ", mu))    text(63, 140, paste("MSE = ", round(mse, 2)))}
myHist <- function(mu){}    }
hist(galton$child,col="blue",breaks=100)lines(c(mu, mu), c(0, 150),col="red",lwd=5)mse <- mean((galton$child - mu)^2)text(63, 150, paste("mu = ", mu))text(63, 140, paste("MSE = ", round(mse, 2)))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
mean(galton$child)
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
myPlot <- function(beta){    y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )    title(paste("beta = ", beta, "mse = ", round(mse, 3)))}manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02)
myPlot <- function(beta){    y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )    title(paste("beta = ", beta, "mse = ", round(mse, 3)))}manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02)
myPlot <- function(beta){    y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )    title(paste("beta = ", beta, "mse = ", round(mse, 3)))}manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02)
myPlot <- function(beta){    y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )    title(paste("beta = ", beta, "mse = ", round(mse, 3)))}
myPlot <- function(beta){    y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )    title(paste("beta = ", beta, "mse = ", round(mse, 3)))}
myPlot <- function(beta){    y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )}
myPlot <- function(beta){y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )}
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3))
}
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
myPlot <- function(beta){y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )}
myPlot <- function(beta){y <- galton$child - mean(galton$child)    x <- galton$parent - mean(galton$parent)    freqData <- as.data.frame(table(x, y))    names(freqData) <- c("child", "parent", "freq")    plot(        as.numeric(as.vector(freqData$parent)),        as.numeric(as.vector(freqData$child)),        pch = 21, col = "black", bg = "lightblue",        cex = .15 * freqData$freq,        xlab = "parent",        ylab = "child"    )    abline(0, beta, lwd = 3)    points(0, 0, cex = 2, pch = 19)    mse <- mean( (y - beta * x)^2 )}
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
manipulate(myHist(mu), mu = slider(62,74,step=0.5))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2,1,3,1)
cor(y, x)
cor(w, x)
beta1 <- cor(w, x)*sd(w)/sd(x)
beta0 <- mean(w) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(w ~ x)))
mean(x)
x<-c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y<-c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(y, x)
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(w ~x)))
rbind(c(beta0, beta1), coef(lm(w ~x))
)
rbind(c(beta0, beta1), coef(lm(y ~x)))
get.data(mtcars)
data(mtcars)
x<-dat$predictor
y<-dat$mpg
beta1 <- cor(y, x)*sd(y)/sd(x)
x
head(dat)
dat <- as.factor(dat)
data(mtcars)
data$mpg
head(mtcars$mpg)
x<-mtcars$weight
y<-mtcars$mpg
names(mtcars)
x<-mtcars$wt
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(y ~x)))
beta1
help cor
cor?
cor
x<-c(8.58, 10.46, 9.01, 9.64, 8.86)
x2<-x-mean(x)
x2
x3<-x2/sd(x)
x3
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(x-y)
mean(y/x)
lm(I(y-mean(y))~ I(x-mean(x)) - 1, data = galton)
lm(I(x-mean(x))~ I(y-mean(y)) - 1, data = galton)
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(y ~x)))
x <- x - mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x2 <- x - mean(x)
x3 <- x/sd(x)
y2 <- y - mean(y)
y3 <- y/sd(y)
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(y ~x)))
x <- x3
y <- y3
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(y ~x)))
mean (x)
mean(x)
mean(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x2 <- x - mean(x)
mean(x2)
y2 <- y - mean(y)
x <- x2
y <- y2
mean(x)
mean(y)
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(y ~x)))
sd(x)
sd(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(x)
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
rbind(c(beta0, beta1), coef(lm(y ~x)))
iotta1 <- cor(x, y)*sd(x)/sd(y)
iotta0 <- mean(x) - iotta1*mean(y)
rbind(c(iotta0, iotta1), coef(lm(x ~y)))
beta1/iotta1
cor(y, x)
sd(x)*sd(y)
var(y)/var(x)
2*sd(y)/sd(x)
cor(y,x)
cor(x,y)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
mean(w)
mean(w)*mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
z <- w*(x-mean(x))^2
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
xx <- c(0.18, -1.54, 0.42, 0.95)
mean(xx)
sd(xx)
w
x
xx
mean(xx)*mean(w)
weighted.mean(xx, w)
weighted.mean(w, xx)
weighted.mean
help weighted.mean
weighted.mean
setwd("~/coursera/exploratory")
fileUrl <- "household_power_consumption.txt"
download.file(fileUrl, destfile = "data.csv", method = "curl")
dateDownloaded <- date()
dataSet <- read.table("./data.csv", sep = ",", header = TRUE)
dataSet2 <- subset(dataSet, VAL %in% 24)
fileUrl <- "/household_power_consumption.txt"
download.file(fileUrl, destfile = "data.csv", method = "curl")
dateDownloaded <- date()
dataSet <- read.table("./data.csv", sep = ",", header = TRUE)
fileUrl <- "household_power_consumption.txt"
dataSet <- read.table("./household_power_consumption.txt", sep = ",", header = TRUE)
dataSet <- read.table("./household_power_consumption.txt", sep = ";", header = TRUE)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
dataSet <- read.table(unz(temp, "a1.dat"), sep = ";", header = TRUE)
unlink(temp)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
file <- unzip(temp)
unlink(temp)
}
dataSet <-read.table(file, header=T, sep=";")
dataSet$Date <- as.Date(power$Date, format="%d/
dataSet$Date <- as.Date(power$Date, format="%d/
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet$Date <- as.Date(power$Date, format="%d/
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet <-read.table(file, sep=";", header = TRUE)
dataSet$Date <- as.Date(power$Date, format="%d/%m/%Y")
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
file <- unzip(temp)
unlink(temp)
}
dataSet <-read.table(file, sep=";", header = TRUE)
dataSet$Date <- as.Date(power$Date, format="%d/%m/%Y")
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet <-read.table(file, sep=";", header = TRUE)
dataSet$Date <- as.Date(dataSet$Date, format="%d/%m/%Y")
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet$Global_active_power <- as.numeric(dataSet$Global_active_power)
plot_1 <- function {
hist(df$Global_active_power, main = paste("Global Active Power"), col="red", xlab="Global Active Power (kilowatts)")
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Plot1.png has been saved in", getwd())
}
plot_1 <- function() {
hist(df$Global_active_power, main = paste("Global Active Power"), col="red", xlab="Global Active Power (kilowatts)")
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Plot1.png has been saved in", getwd())
}
plot_1
plot_1()
plot_1 <- function() {
hist(dataSet$Global_active_power, main = paste("Global Active Power"), col="red", xlab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_1.png", width=504, height=504)
dev.off()
cat("Plot1.png has been saved in", getwd())
}
plot_1()
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
file <- unzip(temp)
unlink(temp)
}
dataSet <-read.table(file, sep=";", header = TRUE)
dataSet$Date <- as.Date(dataSet$Date, format="%d/%m/%Y")
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet$Global_active_power <- as.numeric(as.character(dataSet$Global_active_power)
)
plot_1 <- function() {
hist(dataSet$Global_active_power, main = paste("Global Active Power"), col="red", xlab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_1.png", width=504, height=504)
dev.off()
cat("Plot_1.png has been saved in", getwd())
}
plot_1()
head(dataSet)
plot_2 <- function() {
plot(dataSet$timestamp,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
}
plot1()
plot_2()
plot_2 <- function() {
plot(dataSet$timestamp,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
}
plot_2()
plot_2 <- function() {
plot(dataSet$timestamp,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
cat("plot_2.png has been saved in", getwd())
}
plot_2()
plot_1 <- function() {
hist(dataSet$Global_active_power, main = paste("Global Active Power"), col="red", xlab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_1.png", width=504, height=504)
dev.off()
}
plot_1()
plot(dataSet$timestamp,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
length(dataSet$timestamp)
head(dataSet)
dataset <- transform(dataSet, DateTime=as.POSIXct(paste(Date, Time), "%d/%m/%Y %H:$M:$S"))
head(dataSet)
dataset <- transform(dataSet, DateTime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:$M:$S")
head(dataSet)
head(dataSet$DateTime)
plot_2 <- function() {
plot(dataSet$DateTime,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
cat("plot_2.png has been saved in", getwd())
}
plot_2()
View(dataSet)
dataSet <-read.table(file, sep=";", header = TRUE)
dataSet$Date <- as.Date(dataSet$Date, format="%d/%m/%Y")
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet$Global_active_power <- as.numeric(as.character(dataSet$Global_active_power))
dataSet <- transform(dataSet, DateTime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:$M:$S")
f(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
file <- unzip(temp)
unlink(temp)
}
dataSet <-read.table(file, sep=";", header = TRUE)
dataSet$Date <- as.Date(dataSet$Date, format="%d/%m/%Y")
dataSet <- dataSet[(dataSet$Date=="2007-02-01") | (dataSet$Date=="2007-02-02"),]
dataSet$Global_active_power <- as.numeric(as.character(dataSet$Global_active_power))
dataSet <- transform(dataSet, DateTime=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:$M:$S")
plot_2 <- function() {
plot(dataSet$DateTime,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
cat("plot_2.png has been saved in", getwd())
}
plot_2()
defaults write org.R-project.R force.LANG en_US.UTF-8
plot_2 <- function() {
plot(dataSet$DateTime,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
cat("plot_2.png has been saved in", getwd())
}
plot_2()
$ export LANG=C
plot_2 <- function() {
plot(dataSet$DateTime,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
cat("plot_2.png has been saved in", getwd())
}
plot_2()
plot_2 <- function() {
plot(dataSet$DateTime,dataSet$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot_2.png", width=504, height=504)
dev.off()
}
plot_2()
Sys.setlocale("LC_TIME","English United States")
c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday")[as.POSIXlt(Day)$wday + 1]
